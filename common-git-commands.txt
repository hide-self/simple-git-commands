git config --global user.name "用户名"	//1、设置当前修改人的用户名
git config --global user.email "邮箱地址"	//2、设置当前修改人的邮箱地址
git config --global user.name			//3、查看当前修改人的用户名
git config --global user.email			//4、查看当前修改人的邮箱地址
git init				//5、将当前文件夹变成git仓库
git status				//6、查看当前状态，包括当前文件夹所处仓库是否有修改、是否将缓存区的东西放入仓库
git add 文件名1 文件名2 文件名3		//7、将修改后的文件放入缓存区
git add .				//8、将整个文件夹放入缓存区
git commit -m"注释内容"	//9、将缓存区内容放入仓库，记住一定要写注释内容
git log				//10、显示仓库的修改日志（会完整显示版本号、修改人、修改时间、注释内容等）
git log --pretty=oneline	//11、在一行内简洁显示修改日志


git reset --hard 版本号	//12、将当前仓库回退到版本号所处的状态，日志也会对应修改
git reflog				//13、查看历史纪录，包括回退记录

//14、git兼容控制台的文件命令，包括cd和mkdir，可以正常使用


//序号15~17是远程仓库GitHub的相关git指令
git clone 线上仓库地址	//15、将线上仓库克隆到本地
git push				//16、在提交暂存区、提交本地仓库之后，使用该指令可以将当前仓库提交线上仓库
//注意：16指令后会弹出GitHub浏览器登录窗口，按照要求授权登陆即可
git pull				//17、拉取线上仓库
//若没有用科学上网，push和pull操作有时会失败，请多次尝试

//在每天工作的第一件事就是先git pull拉取线上最新的版本；每天下班前要做的是git push，将本地代码提交到线上仓库。

//对了，别忘记设置token，详细去这个网页里面设置：https://github.com/hide-self/simple-git-commands


ssh-keygen -t rsa -C "注册邮箱"		//18、使用SSH生成公私钥对，执行指令之后连续回车即可，之后向https协议一样使用即可
//公私钥对的方式可以一劳永逸，否则用https的方式，需要每次克隆项目后都登陆一次账号或者输入一次token

//接下来的~是git的分支操作
git branch				//19、查看分支，当前分支前会有一个梅花标记“*”
git branch 分支名		//20、创建分支，创建分支后不会直接切换到新建的分支上去
git checkout 分支名		//21、切换分支
git checkout -b 分支名	//22、先创建分支，后切换分支
git branch -d 分支名		//23、删除分支
git merge 被合并的分支名	//24、“当前分支”合并“被合并分支”